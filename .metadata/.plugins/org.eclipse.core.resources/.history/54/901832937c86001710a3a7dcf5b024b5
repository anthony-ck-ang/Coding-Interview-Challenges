package com.anthonyang.BST;

public class Node {
	
	/*
	 * Binary Tree Structure Rules
	 * 1. left node is always < all right nodes
	 * 2. left node is always < root node
	 * 
	 * Inserts should always be assumed as *Balanced
	 * 	*Balanced -> No of left nodes == No of right nodes
	 * 
	 * Insert -> O(log n)
	 * Find -> O(log n)
	 * 
	 * O(log n)
	 * Don't need to check every node to find the right one
	 * Simply divide-and-conquer by looking based on if the value is > || < root value
	 */

	Node left, right;
	int data;

	public Node(int data) {
		this.data = data;
	}

	public void insert(int value) {
		if (value <= data) { // data == root data, point to left *<-
			if (left == null) {
				left = new Node(value); // create new Node obj -> call Node
										// constructor -> set data
			} else {
				left.insert(value); // recursively call itself again
			}
		} else { // value >= data ->* point right
			if (right == null) {
				right = new Node(value);
			} else {
				right.insert(value);
			}
		}
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
